import random
import datetime
from aiogram import Router, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from sqlalchemy import select
from database import SessionLocal
from models import User
from config import ADMIN_ID

router = Router()

# --- –ö–Ω–æ–ø–∫–∏ ---
btn_profile = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–†–û–§–ò–õ–¨")]],
    resize_keyboard=True
)

btn_request_code = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ó–ê–ü–†–û–°–ò–¢–¨ –ö–û–î")]],
    resize_keyboard=True
)

# --- /start ---
@router.message(F.text == "/start")
async def cmd_start(message: types.Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = result.scalars().first()

        if user and user.is_verified:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –ñ–º–∏ –ü–†–û–§–ò–õ–¨ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.", reply_markup=btn_profile)
        else:
            await message.answer(
                "‚ö†Ô∏è –ù–µ –∑–Ω–∞—é —Ç–µ–±—è!\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                "1Ô∏è‚É£ –ü–æ–ª—É—á–∏ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —É –±–æ—Ç–∞.\n"
                "2Ô∏è‚É£ –°–∫–∞–∂–∏ —ç—Ç–æ—Ç –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=btn_request_code
            )

# --- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ ---
@router.message(F.text == "–ó–ê–ü–†–û–°–ò–¢–¨ –ö–û–î")
async def generate_code(message: types.Message):
    code = str(random.randint(1000, 9999))
    expires_at = datetime.datetime.utcnow() + datetime.timedelta(minutes=2)

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = result.scalars().first()

        if not user:
            user = User(tg_id=message.from_user.id, code=code, is_verified=False)
            session.add(user)
        else:
            user.code = code
            user.is_verified = False
        await session.commit()

    await message.answer(
        f"–í–∞—à –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <b>{code}</b>\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç 2 –º–∏–Ω—É—Ç—ã.\n\n"
        f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="HTML"
    )

# --- –ê–¥–º–∏–Ω: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥ –≤—Ä—É—á–Ω—É—é ---
@router.message(F.text.regexp(r"^/approve \d{4}$"))
async def approve_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    code = message.text.split()[1]

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.code == code))
        user = result.scalars().first()

        if not user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        user.is_verified = True
        user.code = None  # –æ—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await session.commit()

        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        await message.bot.send_message(user.tg_id, "üéâ –£—Å–ø–µ—Ö! –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç.\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É –ü–†–û–§–ò–õ–¨ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!", reply_markup=btn_profile)

# --- –ê–¥–º–∏–Ω: –æ—Ç–æ–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ id ---
@router.message(F.text.regexp(r"^/revoke \d+$"))
async def revoke_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    user_id = int(message.text.split()[1])

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalars().first()

        if not user or not user.is_verified:
            return await message.answer("‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

        user.is_verified = False
        await session.commit()

        await message.answer(f"üö´ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω.")
        await message.bot.send_message(user_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# --- –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.message(F.text == "/users")
async def list_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    async with SessionLocal() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

        if not users:
            return await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

        for u in users:
            status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if u.is_verified else "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"

            # inline-–∫–Ω–æ–ø–∫–∏
            if u.is_verified:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö´ –û—Ç–æ–∑–≤–∞—Ç—å", callback_data=f"revoke_user:{u.tg_id}")]
                ])
            else:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –í—ã–¥–∞—Ç—å", callback_data=f"approve_user:{u.tg_id}")]
                ])

            await message.answer(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {u.tg_id}\n–°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=kb
            )

# --- –ö–Ω–æ–ø–∫–∞: –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø ---
@router.callback_query(F.data.startswith("approve_user"))
async def approve_user_cb(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    user_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalars().first()

        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        user.is_verified = True
        await session.commit()

    await callback.bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –¥–æ—Å—Ç—É–ø.")
    await callback.answer("–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω")

# --- –ö–Ω–æ–ø–∫–∞: –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø ---
@router.callback_query(F.data.startswith("revoke_user"))
async def revoke_user_cb(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    user_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalars().first()

        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        user.is_verified = False
        await session.commit()

    await callback.bot.send_message(user_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await callback.answer("–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω")
